# Generated by Django 4.2 on 2023-11-05 19:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField()),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Non-binary', 'Non-binary'), ('Other', 'Other')], max_length=20)),
                ('phone_number', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('bio', models.CharField(max_length=200)),
                ('cleanliness_level', models.CharField(choices=[('Very neat', 'Very neat'), ('Moderately neat', 'Moderately neat'), ('Messy', 'Messy')], max_length=20, null=True)),
                ('dietary_preferences', models.TextField(null=True)),
                ('smoking_preference', models.CharField(choices=[('Non-smoker', 'Non-smoker'), ('Smoker', 'Smoker')], max_length=20, null=True)),
                ('pet_friendly', models.CharField(choices=[('Pet-friendly', 'Pet-friendly'), ('Not pet-friendly', 'Not pet-friendly')], max_length=20, null=True)),
                ('introverted_or_extroverted', models.CharField(choices=[('Introverted', 'Introverted'), ('Extroverted', 'Extroverted'), ('Ambivert', 'Ambivert')], max_length=20, null=True)),
                ('conflict_resolution_style', models.CharField(choices=[('Calm and diplomatic', 'Calm and diplomatic'), ('Direct and assertive', 'Direct and assertive'), ('Avoidant', 'Avoidant')], max_length=20, null=True)),
                ('communication_preferences', models.CharField(choices=[('Open and direct', 'Open and direct'), ('Polite and indirect', 'Polite and indirect'), ('Non-confrontational', 'Non-confrontational')], max_length=20, null=True)),
                ('room_type_preference', models.CharField(choices=[('Self Contain', 'Self Contain'), ('Flat House', 'Flat House')], max_length=20, null=True)),
                ('specific_room_features', models.TextField(null=True)),
                ('room_furniture_preference', models.CharField(choices=[('Furnished', 'Furnished'), ('Unfurnished', 'Unfurnished')], max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='RoommateMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_score', models.FloatField()),
                ('is_matched', models.BooleanField(default=False)),
                ('roommate1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match1', to=settings.AUTH_USER_MODEL)),
                ('roommate2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='interests',
            field=models.ManyToManyField(blank=True, to='accounts.interest'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
